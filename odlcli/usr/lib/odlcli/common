#!/bin/bash
MACHINE_ID=""
ENCODED_URL=""
CURL_RETVAL=0
CURL_HTTP_CODE=""
TTY_BOLD="\e[1m"
TTY_GREEN="\e[92m"
TTY_AMBER="\e[93;5m"
TTY_ODL_YELLOW="\e[93m"
TTY_ODL_RED="\e[31m"
TTY_RED="\e[101;97m"
TTY_BLUE="\e[94m"
TTY_HIDDEN="\e[8m"
TTY_REVERSE="\e[7m"
TTY_NORMAL="\e[0m"

#${var#*SubStr}  # drops substring from start of string up to first occurrence of `SubStr`
#${var##*SubStr} # drops substring from start of string up to last occurrence of `SubStr`
#${var%SubStr*}  # drops substring from last occurrence of `SubStr` to end of string
#${var%%SubStr*} # drops substring from first occurrence of `SubStr` to end of string

mk_tmp_file() {
 local TMP=$(mktemp -q -p ${CLI_TMP} ${cli_name,,}.$$.XXXXXXXX)
 eval $1=${TMP}
}

rm_tmp_file() {
 if [ -f "${1}" ] ; then
  rm -f "${1}" &> /dev/null
 fi
}

set_config() {
 local RETVAL=0
 grep "${1^^}=" ~/.${cli_name,,} &> /dev/null
 RETVAL=$?
 if [ ${RETVAL} -eq 0 ] ; then
   sed -i "/${1^^}=/ s\.*\\${1^^}=${2}\\" ~/.${cli_name,,}
   RETVAL=$?
 else
   sed -i "\$ a ${1^^}=${2}\\" ~/.${cli_name,,}
   RETVAL=$?
 fi
 return ${RETVAL}
}

delete_config() {
 local RETVAL=0
 grep "${1^^}=" ~/.${cli_name,,} &> /dev/null
 RETVAL=$?
 if [ ${RETVAL} -eq 0 ] ; then
   sed -i "/${1^^}=/ d" ~/.${cli_name,,}
   RETVAL=$?
 fi
 return ${RETVAL}
}

show_config() {
 local RETVAL=0
 grep "${1^^}=" ~/.${cli_name,,} &> /dev/null
 RETVAL=$?
 if [ ${RETVAL} -eq 0 ] ; then
   grep "${1^^}=" ~/.${cli_name,,}|sed -e "s\\^${1^^}=\\\\"
   RETVAL=$?
 fi
 return ${RETVAL}
}

get_config() {
 local RETVAL=0
 grep "${1^^}=" ~/.${cli_name,,} &> /dev/null
 RETVAL=$?
 if [ ${RETVAL} -eq 0 ] ; then
   CONFIG_VALUE=$(grep "${1^^}=" ~/.${cli_name,,}|sed -e "s\\^${1^^}=\\\\")
   RETVAL=$?
   [[ ${RETVAL} -ne 0 ]] && CONFIG_VALUE=""
 fi
 return ${RETVAL}
}

show_config_all() {
 grep -E "^ODL_([A-Z0-9_-]*)=" ~/.${cli_name,,}|sed -e "s\\^ODL_\\\\"
 RETVAL=$?
 return ${RETVAL}
}

set_machine_id() {
 if [ -f /etc/machine-id ] ; then
  MACHINE_ID=$(cat /etc/machine-id)
 elif [ -f /var/lib/dbus/machine-id ] ; then
  MACHINE_ID=$(cat /var/lib/dbus/machine-id)
 else
  MACHINE_ID=$(xxd -l16 -ps /dev/urandom)
 fi
 set_config "MACHINE_ID" "${MACHINE_ID}"
 RETVAL=$?
 return ${RETVAL}
}

get_machine_id() {
 get_config "MACHINE_ID"
 MACHINE_ID="$CONFIG_VALUE"
}

encrypt() {
 if [[ ${OPENSSL_VERSION,,} =~ "openssl1.1." ]] ; then
   CONFIG_VALUE=$(echo "${1}" | openssl enc -e -aes-256-cbc -pbkdf2 -iter 2174 -a -k ${MACHINE_ID} )
 else
   CONFIG_VALUE=$(echo "${1}" | openssl enc -e -aes-256-cbc -a -k ${MACHINE_ID} )
 fi
 return $?
}

decrypt() {
 if [[ ${OPENSSL_VERSION,,} =~ "openssl1.1." ]] ; then
   CONFIG_VALUE=$(echo "${1}" | openssl enc -d -aes-256-cbc -pbkdf2 -iter 2174 -a -k ${MACHINE_ID} )
 else
   CONFIG_VALUE=$(echo "${1}" | openssl enc -d -aes-256-cbc -a -k ${MACHINE_ID} )
 fi
 return $?
}

set_password() {
 local RETVAL=0
 encrypt "${1}"
 RETVAL=$?
 set_config "ODL_PASSWORD" "${CONFIG_VALUE}"
 CONFIG_VALUE=""
 RETVAL=$?
 return ${RETVAL}
}

set_jolokia_password() {
 local RETVAL=0
 encrypt "${1}"
 RETVAL=$?
 set_config "JOLOKIA_PASSWORD" "${CONFIG_VALUE}"
 CONFIG_VALUE=""
 RETVAL=$?
 return ${RETVAL}
}

get_password() {
 local RETVAL=0
 get_config "ODL_PASSWORD"
 decrypt "${CONFIG_VALUE}"
 RETVAL=$?
 return ${RETVAL}
}

get_jolokia_password() {
 local RETVAL=0
 get_config "JOLOKIA_PASSWORD"
 decrypt "${CONFIG_VALUE}"
 RETVAL=$?
 return ${RETVAL}
}

# 1 var response output file
# 2 http method
# 3 URL path
# 4 body file
# 5 content-type value
# 6 accept value
# 7 port override
http_curl() {
 local CURL_REQUEST="--location --request ${2^^}"
 local CURL_PATH="${3}"
 local CURL_RESPONSE="${1}"
 local CURL_CONTENT_TYPE="${5}"
 local CURL_ACCEPT="${6}"
 local HTTP_HEADERS=""
 get_password
 local PASSWORD="${CONFIG_VALUE}"

 CURL_HTTP_CODE=$(/usr/bin/curl -s \
  -o ${CURL_RESPONSE} \
  -w '%{http_code}' \
  --insecure \
  --connect-timeout ${ODL_TIMEOUT} \
  --max-time ${ODL_MAXTIME} \
  --user-agent "${USER_AGENT}" \
  -u "${ODL_USER}:${PASSWORD}" \
  -H "Cache-control: no-cache" \
  -H "Accept: ${CURL_ACCEPT}" \
  -H "Content-Type: ${CURL_CONTENT_TYPE}" \
  -d @${4} \
  ${CURL_REQUEST} \
  "${ODL_PROTOCOL,,}://${ODL_HOST}:${ODL_PORT}${CURL_PATH}" )
  CURL_RETVAL=$?
  if [ "${CURL_HTTP_CODE:0:1}" == "4" ] || [ "${CURL_HTTP_CODE:0:1}" == "5" ] ; then
    CURL_RETVAL=${CURL_HTTP_CODE}
    local CURL_RESTCONF=""
    case ${CURL_HTTP_CODE} in
      400)         CURL_RESTCONF="(response) too-big, malformed-message, missing/bad attribute or element" ;;
      401)         CURL_RESTCONF="access denied" ;;
      403)         CURL_RESTCONF="forbidden" ;;
      404)         CURL_RESTCONF="not-found" ;;
      406)         CURL_RESTCONF="invalid-value" ;;
      405)         CURL_RESTCONF="operation-not-supported" ;;
      409)         CURL_RESTCONF="data-exists, data-missing, in-use or lock or resource denied" ;;
      412)         CURL_RESTCONF="operation-failed" ;;
      413)         CURL_RESTCONF="(request) too-big" ;;
      4[0-9][0-9]) CURL_RESTCONF="bad request" ;;
      500)         CURL_RESTCONF="operation-failed,partial-option or rollback-failed" ;;
      501)         CURL_RESTCONF="operation-not-supported" ;;
      5[0-9][0-9]) CURL_RESTCONF="bad request" ;;
    esac
    [[ -n "${CURL_RESTCONF}" ]] && echo "Error: ${CURL_RESTCONF} [${CURL_HTTP_CODE}]"
  fi
  [[ ${CURL_RETVAL} -eq 18 ]] && CURL_RETVAL=0
}

# 1 var response output file
# 2 http method
# 3 URL path
# 4 body file
# 5 content-type value
# 6 accept value
# 7 port override
jolokia_curl() {
 local CURL_REQUEST="--location --request ${2^^}"
 local CURL_PATH="${3}"
 local CURL_RESPONSE="${1}"
 local CURL_CONTENT_TYPE="${5}"
 local CURL_ACCEPT="${6}"
 local HTTP_HEADERS=""
 get_jolokia_password
 local PASSWORD="${CONFIG_VALUE}"

 CURL_HTTP_CODE=$(/usr/bin/curl -s \
  -o ${CURL_RESPONSE} \
  -w '%{http_code}' \
  --insecure \
  --connect-timeout ${ODL_TIMEOUT} \
  --max-time ${ODL_MAXTIME} \
  --user-agent "${USER_AGENT}" \
  -u "${JOLOKIA_USER}:${PASSWORD}" \
  -H "Cache-control: no-cache" \
  -H "Accept: ${CURL_ACCEPT}" \
  -H "Content-Type: ${CURL_CONTENT_TYPE}" \
  -d @${4} \
  ${CURL_REQUEST} \
  "${ODL_PROTOCOL,,}://${ODL_HOST}:${ODL_PORT}${CURL_PATH}" )
  CURL_RETVAL=$?
  [[ ${CURL_RETVAL} -eq 18 ]] && CURL_RETVAL=0
}

get_yang_tools_version() {
  local RETVAL=0
  get_password
  local PASSWORD="${CONFIG_VALUE}"
  local VERSION=$(/usr/bin/curl -s \
                    --insecure \
                    --connect-timeout ${ODL_TIMEOUT} \
                    --max-time ${ODL_MAXTIME} \
                    --user-agent "${USER_AGENT}" \
                    -u "${ODL_USER}:${PASSWORD}" \
                    -H "Cache-control: no-cache" \
                    -H "Accept: ${CURL_ACCEPT}" \
                    -H "Content-Type: ${CURL_CONTENT_TYPE}" \
                    --location --request GET \
                    "${ODL_PROTOCOL,,}://${ODL_HOST}:${ODL_PORT}/jolokia/read/org.apache.karaf:type=bundle,name=root" | \
                 jq -r '.value.Bundles | to_entries[] | select(.value."Symbolic Name" == "org.opendaylight.yangtools.concepts") | .value.Version'
                 )
  RETVAL=$?
  if [ ${RETVAL} -eq 0 ] ; then
    set_config YANG_TOOLS "${VERSION}"
    YANG_TOOLS="${VERSION}"
  fi
}

show_banner() {
 get_config ODL_YANG_LIBRARY_VERSION
 local YANG_LIBRARY_VERSION="${CONFIG_VALUE}"
 if [ -f "${CLI_LIB}/banner.${cli_name,,}" ] ; then
  [[ ${CLI_INTERACTIVE} -eq 0 ]] && echo -n -e "${TTY_ODL_YELLOW}"
  cat ${CLI_LIB}/banner.${cli_name,,}
  echo -e "                               ${TTY_ODL_YELLOW}OpenDaylight CLI ${CLI_VERSION}${TTY_ODL_YELLOW}"
  echo -e "                          ${TTY_ODL_YELLOW}Connected YANG Library ${YANG_LIBRARY_VERSION}${TTY_NORMAL}\n"
  [[ ${CLI_INTERACTIVE} -eq 0 ]] && echo -n -e "${TTY_NORMAL}"
 fi
}

show_copyright() {
 [[ ${CLI_INTERACTIVE} -eq 0 ]] && echo -n -e "${TTY_ODL_RED}"
 echo "               Cowdrey Consulting UK Ltd <https://www.cowdrey.net/>"
 echo " "
 [[ ${CLI_INTERACTIVE} -eq 0 ]] && echo -n -e "${TTY_ODL_YELLOW}"
 echo "               OpenDaylight Project <https://www.opendaylight.org/>"
 echo "                    License Eclipse Public License (EPL-1.0)"
 echo "    <https://www.opendaylight.org/technical-community/ip-policy/licensing>"
 echo "    <https://www.eclipse.org/legal/eplfaq.php#PARTIESEPL>"
 echo " "
 echo "       This is free software; you are free to change and redistribute it."
 echo "            There is NO WARRANTY, to the extent permitted by law."
}

verify_odl() {
 local RETVAL=0
 local ODL_PING=250
 local ODL_IP_LOOKUP=$(getent hosts ${ODL_HOST}|head -1|awk '{ print $1 }')
 local ODL_IP="${ODL_IP_LOOKUP:-$ODL_HOST}"
 get_config USE_SUDO
 local DO_SUDO="${CONFIG_VALUE}"
 local ON_WSL=$(grep -i Microsoft /proc/version &> /dev/null)
 [[ ${ON_WSL} -eq 0 ]] && DO_SUDO="sudo"
 echo "${cli_name,,} - verifying host ${ODL_HOST} reachable"
 if [[ ${ODL_IP} =~ ^[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}$ ]] ; then
   ${DO_SUDO} ping -c 1 -n -q ${ODL_IP} &>/dev/null
 else
   ${DO_SUDO} ping6 -c 1 -n -q ${ODL_IP} &>/dev/null
 fi
 RETVAL=$?
 if [ ${RETVAL} -eq 0 ] ; then
   echo "${cli_name,,} - verifying ${ODL_HOST}:${ODL_PORT} responding"
   timeout ${ODL_TIMEOUT} /bin/bash -c "cat < /dev/null > /dev/tcp/${ODL_HOST}/${ODL_PORT}" &>/dev/null
   RETVAL=$?
   if [ ${RETVAL} -eq 0 ] ; then
     echo "${cli_name,,} - ${ODL_HOST}:${ODL_PORT} responding"
   else
     echo "${cli_name,,} - ${ODL_HOST}:${ODL_PORT} not responding"
     RETVAL=1
   fi
 else
  echo "${cli_name,,} - ${ODL_HOST} not reachable"
  RETVAL=1
 fi
 if [ ${RETVAL} -ne 0 ] ; then
   echo "${cli_name,,} - RESTCONF not reachable"
   [[ -f ~/.${cli_name,,} ]] && rm -f ~/.${cli_name,,} &>/dev/null
   exit ${RETVAL}
 fi
 return ${RETVAL}
}

discover_root() {
 local RETVAL=0
 echo "${cli_name,,} - discovering RESTCONF root"
 local HREF=$(/usr/bin/curl -s \
                --insecure \
                --connect-timeout ${ODL_TIMEOUT} \
                --max-time ${ODL_MAXTIME} \
                --user-agent "${USER_AGENT}" \
                -H "Cache-control: no-cache" \
                -H "Accept: application/xrd+xml" \
                --location --request GET \
                "${ODL_PROTOCOL,,}://${ODL_HOST}:${ODL_PORT}/.well-known/host-meta" | \
                 xpath -q -e "string(/*[name()='XRD']/Link[@rel='restconf']/@href)"
               )

 if [ -n "${HREF}" ] ; then
  if [ "${HREF:0:1}" == "/" ] ; then
      set_config ODL_PREFIX "${HREF}"
      RETVAL=0
  else
      RETVAL=1
  fi
  else
    RETVAL=1
  fi
 return ${RETVAL}
}

discover_resources() {
 local RETVAL=0
 echo "${cli_name,,} - discovering RESTCONF top-level resources via ${ODL_PREFIX}"
 local CONFIG=""
 local OPER=""
 local HTTP_CODE=""
 local HTTP_RESPONSE=""
 local HTTP_PATH="${ODL_PREFIX}"
 local HTTP_BODY="/dev/null"
 local HTTP_METHOD="GET"
 local HTTP_CONTENT_TYPE="*/*"
 local HTTP_ACCEPT="application/yang-data+xml"
 mk_tmp_file HTTP_RESPONSE
 http_curl "${HTTP_RESPONSE}" "${HTTP_METHOD}" "${HTTP_PATH}" "${HTTP_BODY}" "${HTTP_CONTENT_TYPE}" "${HTTP_ACCEPT}" &>/dev/null
 if [ ${CURL_RETVAL} -eq 0 ] ; then
   if [ "${CURL_HTTP_CODE:0:1}" == "2" ] ; then
      if [ -f "${HTTP_RESPONSE}" ] ; then
        OPER=$(xpath -q -e "/*[name()='restconf']/operations/text()" ${HTTP_RESPONSE})
        CONFIG=$(xpath -q -e "/*[name()='restconf']/data/text()" ${HTTP_RESPONSE})
        [[ -n "${OPER}" ]] && set_config ODL_CONFIG_RESOURCE "${CONFIG}"
        [[ -n "${CONFIG}" ]] && set_config ODL_OPER_RESOURCE "${OPER}"
      fi
   fi
 fi
 rm_tmp_file "${HTTP_RESPONSE}"
 RETVAL=0
 return ${RETVAL}
}

update_yang_library_version() {
 local RETVAL=0
 echo "${cli_name,,} - retrieving RESTCONF YANG library version"
 local HTTP_CODE=""
 local HTTP_RESPONSE=""
 local HTTP_PATH="${ODL_PREFIX}/yang-library-version"
 local HTTP_BODY="/dev/null"
 local HTTP_METHOD="GET"
 local HTTP_CONTENT_TYPE="*/*"
 local HTTP_ACCEPT="application/yang-data+xml"
 local YANG_LIBRARY_VERSION=""
 mk_tmp_file HTTP_RESPONSE
 http_curl "${HTTP_RESPONSE}" "${HTTP_METHOD}" "${HTTP_PATH}" "${HTTP_BODY}" "${HTTP_CONTENT_TYPE}" "${HTTP_ACCEPT}" &>/dev/null
 if [ ${CURL_RETVAL} -eq 0 ] ; then
   if [ "${CURL_HTTP_CODE:0:1}" == "2" ] ; then
      if [ -f "${HTTP_RESPONSE}" ] ; then
        YANG_LIBRARY_VERSION=$(xpath -q -e "/*[name()='yang-library-version']/text()" ${HTTP_RESPONSE})
        [[ -n "${YANG_LIBRARY_VERSION}" ]] && set_config ODL_YANG_LIBRARY_VERSION "${YANG_LIBRARY_VERSION}"
      fi
   fi
 fi
 return ${RETVAL}
}

update_capabilities() {
 local RETVAL=0
 get_config "ODL_CONFIG_RESOURCE"
 ODL_CONFIG_RESOURCE="$CONFIG_VALUE"
 echo "${cli_name,,} - updating RESTCONF server capabilities"
 local HTTP_CODE=""
 local HTTP_RESPONSE=""
 local HTTP_PATH="${ODL_PREFIX}/${ODL_CONFIG_RESOURCE}/ietf-restconf-monitoring:restconf-state/capabilities"
 local HTTP_BODY="/dev/null"
 local HTTP_METHOD="GET"
 local HTTP_CONTENT_TYPE="*/*"
 local HTTP_ACCEPT="application/yang-data+json"
 local URN_IETF_PREFIX="urn:ietf:params:restconf:capability:"
 local URN_ODL_PREFIX="urn:opendaylight:params:restconf:capability:"
 mk_tmp_file HTTP_RESPONSE
 http_curl "${HTTP_RESPONSE}" "${HTTP_METHOD}" "${HTTP_PATH}" "${HTTP_BODY}" "${HTTP_CONTENT_TYPE}" "${HTTP_ACCEPT}"
 if [ ${CURL_RETVAL} -eq 0 ] ; then
   if [ "${CURL_HTTP_CODE:0:1}" == "2" ] ; then
      if [ -f "${HTTP_RESPONSE}" ] ; then
        CAPAS=$(jq -r ".\"ietf-restconf-monitoring:capabilities\".capability | length" ${HTTP_RESPONSE})
        if [ ${CAPAS} -gt 0 ] ; then
          local CAPA=0
          while [ ${CAPA} -lt ${CAPAS} ] ; do
            local CAPABILITY=$(jq -r ".\"ietf-restconf-monitoring:capabilities\".capability[${CAPA}]" ${HTTP_RESPONSE})
            CAPABILITY=${CAPABILITY/#$URN_IETF_PREFIX/}
            CAPABILITY=${CAPABILITY/#$URN_ODL_PREFIX/}
            local VERSION=${CAPABILITY#*:}
            CAPABILITY=${CAPABILITY%%:*}
            CAPABILITY=${CAPABILITY//-/_}
            set_config "CAPABILITY_${CAPABILITY^^}" 0
            ((CAPA=CAPA+1))
          done
        fi
      fi
   else
    RETVAL=${CURL_RETVAL}
   fi
 fi
 rm_tmp_file "${HTTP_RESPONSE}"
 has_capability_content
 [[ $? -eq 0 ]] && echo "${cli_name} - has CONTENT capability"
 has_capability_defaults
 [[ $? -eq 0 ]] && echo "${cli_name} - has DEFAULTS capability"
 has_capability_depth
 [[ $? -eq 0 ]] && echo "${cli_name} - has DEPTH capability"
 has_capability_fields
 [[ $? -eq 0 ]] && echo "${cli_name} - has FIELDS capability"
 has_capability_filter
 [[ $? -eq 0 ]] && echo "${cli_name} - has FILTER capability"
 has_capability_insert
 [[ $? -eq 0 ]] && echo "${cli_name} - has INSERT capability"
 has_capability_leaf_nodes_only
 [[ $? -eq 0 ]] && echo "${cli_name} - has ODL LEAF-NODES-ONLY capability"
 has_capability_point
 [[ $? -eq 0 ]] && echo "${cli_name} - has POINT capability"
 has_capability_pretty_print
 [[ $? -eq 0 ]] && echo "${cli_name} - has ODL PRETTY-PRINT capability"
 has_capability_replay
 [[ $? -eq 0 ]] && echo "${cli_name} - has REPLAY capability"
 has_capability_skip_notification_data
 [[ $? -eq 0 ]] && echo "${cli_name} - has ODL SKIP-NOTIFICATION-DATA capability"
 has_capability_start_time
 [[ $? -eq 0 ]] && echo "${cli_name} - has START-TIME capability"
 has_capability_stop_time
 [[ $? -eq 0 ]] && echo "${cli_name} - has STOP-TIME capability"
 has_capability_with_defaults
 [[ $? -eq 0 ]] && echo "${cli_name} - has WITH-DEFAULTS capability"
 RETVAL=0
 return ${RETVAL}
}

has_capability_content() {
  local RETVAL=0
  get_config "CAPABILITY_CONTENT"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

has_capability_defaults() {
  local RETVAL=0
  get_config "CAPABILITY_DEFAULTS"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

has_capability_insert() {
  local RETVAL=0
  get_config "CAPABILITY_INSERT"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

has_capability_point() {
  local RETVAL=0
  get_config "CAPABILITY_POINT"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

has_capability_start_time() {
  local RETVAL=0
  get_config "CAPABILITY_START_TIME"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

has_capability_stop_time() {
  local RETVAL=0
  get_config "CAPABILITY_STOP_TIME"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

has_capability_depth() {
  local RETVAL=0
  get_config "CAPABILITY_DEPTH"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

has_capability_fields() {
  local RETVAL=0
  get_config "CAPABILITY_FIELDS"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

has_capability_filter() {
  local RETVAL=0
  get_config "CAPABILITY_FILTER"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

has_capability_replay() {
  local RETVAL=0
  get_config "CAPABILITY_REPLAY"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

has_capability_with_defaults() {
  local RETVAL=0
  get_config "CAPABILITY_WITH_DEFAULTS"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

has_capability_pretty_print() {
  local RETVAL=0
  get_config "CAPABILITY_PRETTY_PRINT"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

has_capability_leaf_nodes_only() {
  local RETVAL=0
  get_config "CAPABILITY_LEAF_NODES_ONLY"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

has_capability_skip_notification_data() {
  local RETVAL=0
  get_config "CAPABILITY_SKIP_NOTIFICATION_DATA"
  RETVAL=$?
  [[ ${CONFIG_VALUE} == "0" && ${RETVAL} -eq 0 ]] || RETVAL=1
  return ${RETVAL}
}

install_jolokia() {
 echo "${cli_name,,} - warning Jolokia Monitoring Support is not deployed to SDNc."
 echo "Please connect to Karaf console client and install, example below:"
 echo " "
 echo "\$ ssh -p 8101 -o UserKnownHostsFile=/dev/null -o StrictHostKeyChecking=no karaf@localhost"
 echo "opendaylight-user@karaf> feature:install odl-jolokia"
 echo "opendaylight-user@karaf> feature:install jolokia"
 echo "opendaylight-user@karaf> feature:list | grep jolokia"
 echo "odl-jolokia                                                     │ 1.13.2           │ x        │ Started     │ odl-extras-1.13.2                                               │ Jolokia JMX/HTTP bridge"   echo "jolokia                                                         │ 1.6.1            │ x        │ Started     │ standard-4.2.6                                                  │ Jolokia monitoring support"
 echo "opendaylight-user@karaf> <CTRL>D"
 echo "\$ exit"
 echo " "
}

url_encode() {
  local URL="${1}"
  local URL_LENGTH=${#URL}
  local ENCODED=""
  local POS C O
  for (( POS=0 ; POS<URL_LENGTH ; POS++ )); do
     C=${URL:$POS:1}
     case "${C}" in
        [-_.~a-zA-Z0-9*:] ) O="${C}" ;;
        * )               printf -v O '%%%02X' "'${C}"
     esac
     ENCODED+="${O}"
  done
  ENCODED_URL="${ENCODED}"
}

cli_help() {
  local RETVAL=0
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "Usage: ${TTY_BOLD}[cmd]${TTY_NORMAL}"
    echo -e "${TTY_BOLD}Commands${TTY_NORMAL}:"
  else
    echo "Usage: ${cli_name,,} [cmd]"
    echo "Commands:"
  fi
  find ${CLI_LIB}/ -type f -executable -printf "\t%f\n"|grep -v common
  echo -e "\trefresh\t\tRefresh SDNc capabilities etc."
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "\tconfigure\tReconfigure the environment"
    echo -e "\tquit\t\tExit the CLI"
  fi
  RETVAL=$?
  return ${RETVAL}
}

aaa_help_list() {
  local RETVAL=0
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "Usage: ${TTY_BOLD}aaa [key] [action] [options]${TTY_NORMAL}"
    echo -e "${TTY_BOLD}Commands${TTY_NORMAL}:"
  else
    echo "Usage: ${cli_name,,} aaa [key] [action] [options]"
    echo "Commands:"
  fi
  echo "   domains add        <<domain-name>>"
  echo "                      [--description <<text>>]"
  echo "                      [--enable]"
  echo "   domains disable    <<domain-name>>"
  echo "   domains enable     <<domain-name>>"
  echo "   doamins list"
  echo "   domains delete     <<domain-name>>"
  echo " "
  echo "   roles add          <<role-name>>"
  echo "                      [--domain <<domain-name>>]"
  echo "   roles list         [--domain <<domain-name>>]"
  echo "   roles delete       <<role-name>>"
  echo "                      [--domain <<domain-name>>]"
  echo " "
  echo "   users add          <<username>>"
  echo "                      [--domain <<domain-name>>]"
  echo "                      [--description <<text>>]"
  echo "                      [--enable]"
  echo "                      [--email <<text>>]"
  echo "                      [--password <<text>>]"
  echo "   users delete       <<username"
  echo "                      [--domain <<domain-name>>]"
  echo "   users disable      <<username>>"
  echo "                      [--domain <<domain-name>>]"
  echo "   users enable       <<username>>"
  echo "                      [--domain <<domain-name>>]"
  echo "   users list         [[-domain <<domain-name>>]"
  echo "   users password     <<username>>"
  echo "                      --password <<text>>"
  echo "                      [--domain <<domain-name>>]"
  echo " "
  echo "   policies add       <<url-resource>>"
  echo "                      <<role-name>>"
  echo "                      [--index <<index-value>> ]"
  echo "                      [--get] [--post] [--put] [--patch] [--delete]"
  echo "                      [--insert] [--append] [--line <<line-number>>]"
  echo "                      [--domain <<domain-name>>]"
  echo "   policies list      [--role <<role-name>>]"
  echo "                      [--domain <<domain-name>>]"
  echo "   policies delete    <<url-resourcee>>"
  echo "                      [--role <<role-name>>]"
  echo "                      [--domain <<domain-name>>]"
  echo " "
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e " {$TTY_BOLD}Attention\e[0m"
    echo -e " - when <<domain-name>> is not supplied, domain will default to {$TTY_BOLD}${ODL_AAA_DEFAULT_DOMAIN}${TTY_NORMAL}"
    echo -e " - the default domain {$TTY_BOLD}${ODL_AAA_DEFAULT_DOMAIN}\e[0m can not be deleted, nor can the default user {$TTY_BOLD}${ODL_AAA_DEFAULT_USER}\e[0m (on domain {$TTY_BOLD}${ODL_AAA_DEFAULT_DOMAIN}\e[0m)"
  else
    echo " Attention:"
    echo " - when <<domain-name>> is not supplied, domain will default to '${ODL_AAA_DEFAULT_DOMAIN}'"
    echo " - the default domain '${ODL_AAA_DEFAULT_DOMAIN}' can not be deleted, nor can the default user '${ODL_AAA_DEFAULT_USER}' (on domain '${ODL_AAA_DEFAULT_DOMAIN}')"
  fi
    echo " - insert/append new policies will be inserted before or appended after the supplied <<line-number>> - default is append"
    echo " - if no <<line-number>> supplied, append will be after exsting last policy and insert will be before last policy"
    echo " - URL resources should include all appropriate wildcards, i.e. ${ODL_PREFIX}/** , ${ODL_PREFIX}/${ODL_CONFIG_RESOURCE}/network-topology:network-topology/topology=topology-netconf/**"
  echo " "
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "\e[31m\e[1mWarning${TTY_NORMAL}:"
    echo -e " - {$TTY_BOLD}ALL\e[0m deletes will automatically propagate where appropriate i.e. deleting a domain will also delete associated users and roles etc.; deleting a role will also delete associated policies"
  else
    echo " Warning:"
    echo " - 'ALL' deletes will automatically propagate where appropriate i.e. deleting a domain will also delete associated users and roles etc.; deleting a role will also delete associated policies"
  fi
  return ${RETVAL}
}

nodes_help_list() {
  local RETVAL=0
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "Usage: ${TTY_BOLD}nodes [cmd]${TTY_NORMAL}"
    echo -e "${TTY_BOLD}Commands${TTY_NORMAL}:"
  else
    echo "Usage: ${cli_name,,} nodes [cmd]"
    echo "Commands:"
  fi
  echo "   aaa <<node-id>>                       Verify AAA access to specific node"
  echo "       [ --name                        ] username to attempt access with, if not specified defualt will be used"
  echo "       [ --password                    ] password to attempt access with, if not specififed default will be used"
  echo "   export                                Exported listed nodes"
  echo "        [ --encrypt                    ] encrypt passwords"
  echo "   list                                  List known nodes"
  echo "   status                                List connection status of known nodes"
  echo "   config <<node-id>> | --all            Retrieve configuration for node(s)"
  echo "       [  --exclude <<node-id>>        ] Exclude specified node, repeat as necessary"
  echo "   nonconfig <<node-id>> | --all         Retrieve operational details for node(s)"
  echo "       [ --exclude <<node-id>>         ] Exclude specified node, repeat as ncessary"
  echo "   state  <<node-id>> | --all            ONF control-construct operational state"
  echo "       [  --yang-model <<model>>       ] YANG model, defaults to core-model-1-4"
  echo "       [  --exclude <<node-id>>        ] Exclude specified node, repeat as necessary"
  echo "       [  --extended                   ] Fetch LTPs and report status and size"
  echo "       [  --timeout <<milliseconds>>   ] Maximum wait (milliseconds, default 60000)"
  echo "   test <<node-id>> | --all              PING, SSH verify, NETCONF verify specified node or all known"
  echo "       [  --timeout <<seconds>>        ] Maximum wait (seconds)"
  echo "       [  --capabilities]              ] additional display reported NETCONF capabilities of the node(s)"
  echo "   mount <<node-id>>                     Mount network device/node"
  echo "          --host <<ip>>                  node IP or FQDN"
  echo "          --username <<text>>            node NETCONF username"
  echo "          --password <<text>>            node NETCONF password"
  echo "       [ --keepalive-delay <<seconds>> ] override keepalive delay (default: 120), 0 off"
  echo "       [ --sleep-factor <<seconds>>    ] override sleep factor (default: 1.5)"
  echo "       [ --encrypted-password <<text>> ] use supplied encrypted password"
  echo "       [ --port <<port number>>        ] node NETCONF port (default: 830)"
  echo "       [ --cache <<dir>>               ] mount node schema cache directory"
  echo "       [ --cschema                     ] node reconnect on changed schema"
  echo "       [ --timeout <<milliseconds>>    ] node default request timeout"
  echo "       [ --tcp-only                    ] node limited to TCP only"
  echo "       [ --max-attempts <<attempts>>   ] maximum attempts of connecting to node, default 0/unlimited"
  echo "       [ --concurrent <<rpc-limit>>    ] maximum of RPC to send before response received, default 0/unlimited"
  echo "       [ --schemaless                  ] skip NETCONF schema retrieval during mount"
  echo "   schema list <<node-id>>               List known YANG schemas on mounted node"
  echo "   schema fetch <<node-id>>              Fetch known YANG schemas on mounted node"
  echo "         --identifier <<schema>>         YANG schema identifier, e.g. ietf-netconf-monitoring"
  echo "       [ --version <<version>>         ] YANG schema revision, e.g. 2010-10-04"
  echo "       [ --format <<format>>           ] YANG schema format, e.g. yang - default yang"
  echo "   ummount <<node-id>> | --all           Unmount network device/node or all"
  return ${RETVAL}
}

delete_help_list() {
  local RETVAL=0
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "Usage: ${TTY_BOLD}delete [parameter]${TTY_NORMAL}"
    echo -e "${TTY_BOLD}Parameters${TTY_NORMAL}:"
  else
    echo "Usage: ${cli_name,,} delete [parameter]"
    echo "Parameters:"
  fi
  echo "   user/pass/protocol/host/port/timeout/maxtime can not be deleted"
  echo "   <<name>>         Delete custom parameter"
  return ${RETVAL}
}

query_help_list() {
  local RETVAL=0
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "Usage: ${TTY_BOLD}query [method] [path]${TTY_NORMAL}"
    echo -e "${TTY_BOLD}Parameters${TTY_NORMAL}:"
  else
    echo "Usage: ${cli_name,,} query [method] [path]"
    echo "Parameters:"
  fi
  echo "   get '<<URL Path>>'                   RESTCONF Get URL path, do not include ${ODL_PREFIX}/${ODL_CONFIG_RESOURCE} prefix i.e."
  echo "                                        GET '/network-topology:network-topology/topology=topology-netconf?content=nonconfig&fields=node(node-id)'"
  return ${RETVAL}
}

set_help_list() {
  local RETVAL=0
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "Usage: ${TTY_BOLD}set [parameter] [value]${TTY_NORMAL}"
    echo -e "${TTY_BOLD}Parameters${TTY_NORMAL}:"
  else
    echo "Usage: ${cli_name,,} set [parameter] [value]"
    echo "Parameters:"
  fi
  echo "   user      Set RESTCONF API username"
  echo "   pass      Set RESTCONF API password"
  echo "   protocol  Set RESTCONF API protocol"
  echo "   host      Set RESTCONF API host"
  echo "   port      Set RESTCONF API port number"
  echo "   prefix    Set RESTCONF API path prefix [${ODL_PREFIX}]"
  echo "   timeout   Set RESTCONF API connection timeout (seconds)"
  echo "   maxtime   Set RESTCONF API max wait timeout (seconds)"
  echo "   <<name>>  Set custom parameter"
  echo "   juser     Set Jolokia username"
  echo "   jpass     Set Jolokia password"
  return ${RETVAL}
}

show_help_list() {
  local RETVAL=0
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "Usage: ${TTY_BOLD}show [parameter] | --all\e[0m"
    echo -e "${TTY_BOLD}Parameters${TTY_NORMAL}:"
  else
    echo "Usage: ${cli_name,,} show [parameter] | --all"
    echo "Parameters:"
  fi
  echo "   version     ${cli_name,,} version"
  echo "   user        Show RESTCONF API username"
  echo "   pass        Show RESTCONF API password"
  echo "   protocol    Show RESTCONF API protocol"
  echo "   host        Show RESTCONF API host"
  echo "   port        Show RESTCONF API port number"
  echo "   prefix      Show RESTCONF API path prefix [${ODL_PREFIX}]"
  echo "   timeout     Show RESTCONF API connection timeout (seconds)"
  echo "   maxtime     Show RESTCONF API max wait timeout (seconds)"
  echo "   juser       Show Jolokia username"
  echo "   jpass       Show Jolokia password"
  echo " Not included within --all"
  echo "   capability  Show RESTCONF API offered capabilities"
  echo "   <<name>>    Show customer parameter"
  return ${RETVAL}
}

sites_help_list() {
  local RETVAL=0
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "Usage: ${TTY_BOLD}sites [cmd]${TTY_NORMAL}"
    echo -e "${TTY_BOLD}Commands${TTY_NORMAL}:"
  else
    echo "Usage: ${cli_name,,} sites [cmd]"
    echo "Commands:"
  fi
  echo "   list [svn-name]            List known sites vpn-name and nodes"
  return ${RETVAL}
}

pon_help_list() {
  local RETVAL=0
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "Usage: ${TTY_BOLD}pon [cmd]${TTY_NORMAL}"
    echo -e "${TTY_BOLD}Commands${TTY_NORMAL}:"
  else
    echo "Usage: ${cli_name,,} pon [cmd]"
    echo "Commands:"
  fi
  echo "   test                        perform test cycle"
  echo "   clean                       unmount test VOLT-MF, ONU etc."
  return ${RETVAL}
}

streams_help_list() {
  local RETVAL=0
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "Usage: ${TTY_BOLD}streams [cmd]${TTY_NORMAL}"
    echo -e "${TTY_BOLD}Commands${TTY_NORMAL}:"
  else
    echo "Usage: ${cli_name,,} streams [cmd]"
    echo "Commands:"
  fi
  echo "    bootstrap                  Used to intialize the RFC8040 Events/Notification streams upon SDNc startup"
  echo "                               note: should not be generally used but will not cause harm and can be used"
  echo "                                     to verify availability of capability"
  echo "    list                       List currently available RFC8040 Events/Notification streams"
  echo "         [ --json-only       ] limit to JSON encoded streams"
  echo "         [ --xml-only        ] limit to XML encoded streams"
  echo "    monitor <<stream>>         Interactively subscribe and display RFC8040 stream"
  echo "                               <<stream>> is stream location segment"
  echo "                               i.e. ietf-netconf-notifications:netconf-config-change"
  echo "         [ --sse             ] RFC8040 Server-Sent Events (SSE) stream (default)"
  echo "         [ --ws              ] WebSockets stream"
  echo "         [ --json            ] JSON encoding, rather than default XML encoding"
  return ${RETVAL}
}

akka_help_list() {
  local RETVAL=0
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "Usage: ${TTY_BOLD}akka [cmd]${TTY_NORMAL}"
    echo -e "${TTY_BOLD}Commands${TTY_NORMAL}:"
  else
    echo "Usage: ${cli_name,,} streams [cmd]"
    echo "Commands:"
  fi
  echo "    members                  List currently AKKA members"
  echo "         [ --json-only       ] limit to JSON encoded streams"
  echo "         [ --xml-only        ] limit to XML encoded streams"
  echo "    monitor <<stream>>         Interactively subscribe and display RFC8040 stream"
  echo "                               <<stream>> is stream location segment"
  echo "                               i.e. ietf-netconf-notifications:netconf-config-change"
  echo "         [ --sse             ] RFC8040 Server-Sent Events (SSE) stream (default)"
  echo "         [ --ws              ] WebSockets stream"
  echo "         [ --json            ] JSON encoding, rather than default XML encoding"
  return ${RETVAL}
}

stats_help_list() {
  local RETVAL=0
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "Usage: ${TTY_BOLD}stats [cmd]${TTY_NORMAL}"
    echo -e "${TTY_BOLD}Commands${TTY_NORMAL}:"
  else
    echo "Usage: ${cli_name,,} stats [cmd]"
    echo "Commands:"
  fi
  echo "   runtime   List JVM runtime"
  echo "   os        List Operating System"
  echo "   memory    List JVM memory usage"
  echo "   version   List ${cli_name,,} component versions"
  echo "   nodecount List Lumina Node Counter"
  return ${RETVAL}
}

schema_help_list() {
  local RETVAL=0
  if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
    echo -e "Usage: ${TTY_BOLD}schema [cmd]${TTY_NORMAL}"
    echo -e "${TTY_BOLD}Commands${TTY_NORMAL}:"
  else
    echo "Usage: ${cli_name,,} schema [cmd]"
    echo "Commands:"
  fi
  echo "   list                     List known YANG schemas"
  echo "   library                  List YANG Library Version (revision)"
  return ${RETVAL}
}

refresh_odl() {
  local RETVAL=0
  discover_root && \
  RETVAL=$? && \
  discover_resources && \
  RETVAL=$? && \
  update_yang_library_version && \
  RETVAL=$?
  update_capabilities && \
  RETVAL=$?
  return ${RETVAL}
}

configure() {
  local RETVAL=0
  if [ -f ~/.${cli_name,,} ] ; then
    source ~/.${cli_name,,}
  else
    local ON_WSL=$(grep -i Microsoft /proc/version &> /dev/null)
    [[ ${ON_WSL} ]] && set_config USE_SUDO "sudo"
    cp ${CLI_LIB}/config.template ~/.${cli_name,,} && chmod 600 ~/.${cli_name,,}
    DEFAULT_ODL_PROTOCOL="http"
    DEFAULT_ODL_USER="admin"
    DEFAULT_ODL_PASSWORD="admin"
    DEFAULT_ODL_HOST="127.0.0.1"
    DEFAULT_ODL_PORT="8181"
    DEFAULT_JOLOKIA_USER="admin"
    DEFAULT_JOLOKIA_PASSWORD="admin"
    ODL_PROTOCOL="${ODL_PROTOCOL:-$DEFAULT_ODL_PROTOCOL}"
    ODL_USER="${ODL_USER:-$DEFAULT_ODL_USER}"
    ODL_PASSWORD="${ODL_PASSWORD:-$DEFAULT_ODL_PASSWORD}"
    ODL_PROTOCOL="${ODL_PROTOCOL:-$DEFAULT_ODL_PROTOCOL}"
    ODL_HOST="${ODL_HOST:-$DEFAULT_ODL_HOST}"
    ODL_PORT="${ODL_PORT:-$DEFAULT_ODL_PORT}"
    JOLOKIA_USER="${JOLOKIA_USER:-$DEFAULT_JOLOKIA_USER}"
    JOLOKIA_PASSWORD="${JOLOKIA_PASSWORD:-$DEFAULT_JOLOKIA_PASSWORD}"
    if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
      echo "${cli_name,,} - first time use, please enter SDNc RESTCONF API details:"
      read -e -p "username [${ODL_USER}] ? " ODL_USER
      read -e -p "password [${ODL_PASSWORD}] ? " ODL_PASSWORD
      read -e -p "protocol [${ODL_PROTOCOL}] ? " ODL_PROTOCOL
      case ${ODL_PROTOCOL,,} in
        "")    ;;
        http)  ;;
        https) ;;
        *)     echo "${cli_name,,} - invalid protocol ${ODL_PROTOCOL}, defaulting to ${DEFAULT_ODL_PROTOCOL,,}"
               ODL_PROTOCOL="${DEFAULT_ODL_PROTOCOL,,}"
               ;;
      esac
      read -e -p "host [${DEFAULT_ODL_HOST}] ? " ODL_HOST
      read -e -p "port [${DEFAULT_ODL_PORT}] ? " ODL_PORT
      read -e -p "Jolokia username [${DEFAULT_JOLOKIA_USER}] ? " JOLOKIA_USER
      read -e -p "Jolokia password [${DEFAULT_JOLOKIA_PASSWORD}] ? " JOLOKIA_PASSWORD
      OPENSSL_VERSION=$(openssl version)
      OPENSSL_VERSION=${OPENSSL_VERSION//[[:blank:]]/}
      ODL_USER="${ODL_USER:-$DEFAULT_ODL_USER}"
      ODL_PASSWORD="${ODL_PASSWORD:-$DEFAULT_ODL_PASSWORD}"
      ODL_PROTOCOL="${ODL_PROTOCOL:-$DEFAULT_ODL_PROTOCOL}"
      ODL_HOST="${ODL_HOST:-$DEFAULT_ODL_HOST}"
      ODL_PORT="${ODL_PORT:-$DEFAULT_ODL_PORT}"
      JOLOKIA_USER="${JOLOKIA_USER:-$DEFAULT_JOLOKIA_USER}"
      JOLOKIA_PASSWORD="${JOLOKIA_PASSWORD:-$DEFAULT_JOLOKIA_PASSWORD}"
    fi
    echo "${cli_name,,} - updating environment"
    #
    set_machine_id
    set_config OPENSSL_VERSION "${OPENSSL_VERSION//[[:blank:]]/}"
    set_config ODL_USER "${ODL_USER}"
    set_password "${ODL_PASSWORD}"
    set_config ODL_PROTOCOL "${ODL_PROTOCOL,,}"
    set_config ODL_HOST "${ODL_HOST,,}"
    set_config ODL_PORT "${ODL_PORT}"
    set_config JOLOKIA_USER "${JOLOKIA_USER}"
    set_jolokia_password "${JOLOKIA_PASSWORD}"
    #
    source ~/.${cli_name,,}
    #
    verify_odl
    RETVAL=$?
    #
    refresh_odl
    RETVAL=$?
    #
    echo "${cli_name,,} - ready"
    echo " "
  fi
  return ${REVAL}
}

clean_sigint() {
  local RETVAL=0
  rm -f "${CLI_TMP}/${cli_name,,}.$$.????????" &>/dev/null
  exit ${RETVAL}
}

cli_exec() {
  local RETVAL=0
  local CLI_CMD=""
  if [ ${1,,} == "refresh" ] ; then
    refresh_odl
    RETVAL=$?
  elif [ -f "${CLI_LIB}/${1,,}" ] ; then
    CLI_CMD="${1,,}"
    shift
    . ${CLI_LIB}/${CLI_CMD,,,} "${@}"
    RETVAL=$?
    if [ ${RETVAL} -gt 0 ] ; then
      if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
        echo -e "Error [${TTY_RED}${RETVAL}${TTY_NORMAL}]"
      else
        echo "Error [${RETVAL}]"
      fi
    fi
  else
    if [ ${CLI_INTERACTIVE} -eq 0 ] ; then
      echo -e "Invalid command \"${TTY_GREEN}${1}${TTY_NORMAL}\"; type '${TTY_BOLD}help${TTY_NORMAL}' for a list."
    else
      echo "Invalid command \"${1}\"; type 'help' for a list."
    fi
    RETVAL=1
  fi
  return ${RETVAL}
}

cli_interactive() {
  local RETVAL=0
  show_banner
  echo -e "From shell (not here yet) use the '${TTY_BOLD}<tab>${TTY_NORMAL}' key for a list of available commands."
  echo -e "Use '${TTY_BOLD}[cmd] help${TTY_NORMAL}' for a specific command, where '[${TTY_NORMAL}cmd${TTY_NORMAL}]' is the command name."
  echo -e "Use '${TTY_BOLD}<Ctrl><d>${TTY_NORMAL}' or '${TTY_BOLD}quit${TTY_NORMAL}' to exit the CLI"
  echo " "
  while true ; do
    local LINE=()
    #read -e -a LINE -p $"${TTY_GREEN}${cli_name,,}${TTY_BLUE}>${TTY_NORMAL} "
    read -e -a LINE -p $"[92m${cli_name,,}[94m>[0m "
    if [ $? -gt 0 ] ; then
      break
    else
      if [ -n "${LINE}" ] ; then
        case "${LINE,,}" in
         help|?) cli_help
                 RETVAL=$?
                 ;;
         quit)   break
                 ;;
         refresh)
                 refresh_odl
                 RETVAL=$?
                 ;;
         configure)
                 [[ -f ~/.${cli_name,,} ]] && rm -f ~/.${cli_name,,} &>/dev/null
                 configure
                 RETVAL=$?
                 ;;
         *)      cli_exec ${LINE[@]}
                 RETVAL=$?
                 ;;
        esac
      fi
    fi
    unset LINE
  done
  echo " "
  return ${RETVAL}
}